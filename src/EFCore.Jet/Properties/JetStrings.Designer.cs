//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntityFrameworkCore.Jet.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class JetStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal JetStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("EntityFrameworkCore.Jet.Properties.JetStrings", typeof(JetStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To change the IDENTITY property of a column, the column needs to be dropped and recreated..
        /// </summary>
        public static string AlterIdentityColumn {
            get {
                return ResourceManager.GetString("AlterIdentityColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To set memory-optimized on a table on or off the table needs to be dropped and recreated..
        /// </summary>
        public static string AlterMemoryOptimizedTable {
            get {
                return ResourceManager.GetString("AlterMemoryOptimizedTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{entityType1}.{property1}&apos; and &apos;{entityType2}.{property2}&apos; are both mapped to column &apos;{columnName}&apos; in &apos;{table}&apos; but are configured with different value generation strategies..
        /// </summary>
        public static string DuplicateColumnNameValueGenerationStrategyMismatch {
            get {
                return ResourceManager.GetString("DuplicateColumnNameValueGenerationStrategyMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;FreeText&apos; method is not supported because the query has switched to client-evaluation. Inspect the log to determine which query expressions are triggering client-evaluation..
        /// </summary>
        public static string FreeTextFunctionOnClient {
            get {
                return ResourceManager.GetString("FreeTextFunctionOnClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identity value generation cannot be used for the property &apos;{property}&apos; on entity type &apos;{entityType}&apos; because the property type is &apos;{propertyType}&apos;. Identity value generation can only be used with signed integer properties..
        /// </summary>
        public static string IdentityBadType {
            get {
                return ResourceManager.GetString("IdentityBadType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use table &apos;{table}&apos; for entity type &apos;{entityType}&apos; since it is being used for entity type &apos;{otherEntityType}&apos; and entity type &apos;{memoryOptimizedEntityType}&apos; is marked as memory-optimized, but entity type &apos;{nonMemoryOptimizedEntityType}&apos; is not..
        /// </summary>
        public static string IncompatibleTableMemoryOptimizedMismatch {
            get {
                return ResourceManager.GetString("IncompatibleTableMemoryOptimizedMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Jet requires the table name to be specified for rename index operations. Specify table name in the call to MigrationBuilder.RenameIndex..
        /// </summary>
        public static string IndexTableRequired {
            get {
                return ResourceManager.GetString("IndexTableRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expression passed to the &apos;propertyReference&apos; parameter of the &apos;FreeText&apos; method is not a valid reference to a property. The expression should represent a reference to a full-text indexed property on the object referenced in the from clause: &apos;from e in context.Entities where EF.Functions.FreeText(e.SomeProperty, textToSearchFor) select e&apos;.
        /// </summary>
        public static string InvalidColumnNameForFreeText {
            get {
                return ResourceManager.GetString("InvalidColumnNameForFreeText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified table &apos;{table}&apos; is not valid. Specify tables using the format &apos;[schema].[table]&apos;..
        /// </summary>
        public static string InvalidTableToIncludeInScaffolding {
            get {
                return ResourceManager.GetString("InvalidTableToIncludeInScaffolding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; is of type &apos;byte&apos;, but is set up to use a Jet identity column. This requires that values starting at 255 and counting down will be used for temporary key values. A temporary key value is needed for every entity inserted in a single call to &apos;SaveChanges&apos;. Care must be taken that these values do not collide with real key values..
        /// </summary>
        public static string LogByteIdentityColumn {
            get {
                return ResourceManager.GetString("LogByteIdentityColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No type was specified for the decimal column &apos;{property}&apos; on entity type &apos;{entityType}&apos;. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using &apos;HasColumnType()&apos;..
        /// </summary>
        public static string LogDefaultDecimalTypeColumn {
            get {
                return ResourceManager.GetString("LogDefaultDecimalTypeColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found column with table: {tableName}, column name: {columnName}, ordinal: {ordinal}, data type: {dataType}, maximum length: {maxLength}, precision: {precision}, scale: {scale}, nullable: {isNullable}, identity: {isIdentity}, default value: {defaultValue}, computed value: {computedValue}.
        /// </summary>
        public static string LogFoundColumn {
            get {
                return ResourceManager.GetString("LogFoundColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found default schema {defaultSchema}..
        /// </summary>
        public static string LogFoundDefaultSchema {
            get {
                return ResourceManager.GetString("LogFoundDefaultSchema", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found foreign key on table: {tableName}, name: {foreignKeyName}, principal table: {principalTableName}, delete action: {deleteAction}..
        /// </summary>
        public static string LogFoundForeignKey {
            get {
                return ResourceManager.GetString("LogFoundForeignKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found index with name: {indexName}, table: {tableName}, is unique: {isUnique}..
        /// </summary>
        public static string LogFoundIndex {
            get {
                return ResourceManager.GetString("LogFoundIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found primary key with name: {primaryKeyName}, table: {tableName}..
        /// </summary>
        public static string LogFoundPrimaryKey {
            get {
                return ResourceManager.GetString("LogFoundPrimaryKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found sequence name: {name}, data type: {dataType}, cyclic: {isCyclic}, increment: {increment}, start: {start}, minimum: {min}, maximum: {max}..
        /// </summary>
        public static string LogFoundSequence {
            get {
                return ResourceManager.GetString("LogFoundSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found table with name: {name}..
        /// </summary>
        public static string LogFoundTable {
            get {
                return ResourceManager.GetString("LogFoundTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found type alias with name: {alias} which maps to underlying data type {dataType}..
        /// </summary>
        public static string LogFoundTypeAlias {
            get {
                return ResourceManager.GetString("LogFoundTypeAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found unique constraint with name: {uniqueConstraintName}, table: {tableName}..
        /// </summary>
        public static string LogFoundUniqueConstraint {
            get {
                return ResourceManager.GetString("LogFoundUniqueConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find a schema in the database matching the selected schema {schema}..
        /// </summary>
        public static string LogMissingSchema {
            get {
                return ResourceManager.GetString("LogMissingSchema", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find a table in the database matching the selected table {table}..
        /// </summary>
        public static string LogMissingTable {
            get {
                return ResourceManager.GetString("LogMissingTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For foreign key {foreignKeyName} on table {tableName}, unable to find the column called {principalColumnName} on the foreign key&apos;s principal table, {principaltableName}. Skipping foreign key..
        /// </summary>
        public static string LogPrincipalColumnNotFound {
            get {
                return ResourceManager.GetString("LogPrincipalColumnNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For foreign key {fkName} on table {tableName}, unable to model the end of the foreign key on principal table {principaltableName}. This is usually because the principal table was not included in the selection set..
        /// </summary>
        public static string LogPrincipalTableNotInSelectionSet {
            get {
                return ResourceManager.GetString("LogPrincipalTableNotInSelectionSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The properties {properties} are configured to use &apos;Identity&apos; value generator and are mapped to the same table &apos;{table}&apos;. Only one column per table can be configured as &apos;Identity&apos;. Call &apos;ValueGeneratedNever&apos; for properties that should not use &apos;Identity&apos;..
        /// </summary>
        public static string MultipleIdentityColumns {
            get {
                return ResourceManager.GetString("MultipleIdentityColumns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The database name could not be determined. To use EnsureDeleted, the connection string must specify Initial Catalog..
        /// </summary>
        public static string NoInitialCatalog {
            get {
                return ResourceManager.GetString("NoInitialCatalog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; is configured to use &apos;SequenceHiLo&apos; value generator, which is only intended for keys. If this was intentional configure an alternate key on the property, otherwise call &apos;ValueGeneratedNever&apos; or configure store generation for this property..
        /// </summary>
        public static string NonKeyValueGeneration {
            get {
                return ResourceManager.GetString("NonKeyValueGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Jet sequences cannot be used to generate values for the property &apos;{property}&apos; on entity type &apos;{entityType}&apos; because the property type is &apos;{propertyType}&apos;. Sequences can only be used with integer properties..
        /// </summary>
        public static string SequenceBadType {
            get {
                return ResourceManager.GetString("SequenceBadType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception has been raised that is likely due to a transient failure. Consider enabling transient error resiliency by adding &apos;EnableRetryOnFailure()&apos; to the &apos;UseJet&apos; call..
        /// </summary>
        public static string TransientExceptionDetected {
            get {
                return ResourceManager.GetString("TransientExceptionDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data type &apos;{dataType}&apos; is not supported in this form. Either specify the length explicitly in the type name, for example as &apos;{dataType}(16)&apos;, or remove the data type and use APIs such as HasMaxLength to allow EF choose the data type..
        /// </summary>
        public static string UnqualifiedDataType {
            get {
                return ResourceManager.GetString("UnqualifiedDataType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data type &apos;{dataType}&apos; for property &apos;{property}&apos; is not supported in this form. Either specify the length explicitly in the type name, for example as &apos;{dataType}(16)&apos;, or remove the data type and use APIs such as HasMaxLength to allow EF choose the data type..
        /// </summary>
        public static string UnqualifiedDataTypeOnProperty {
            get {
                return ResourceManager.GetString("UnqualifiedDataTypeOnProperty", resourceCulture);
            }
        }
    }
}
